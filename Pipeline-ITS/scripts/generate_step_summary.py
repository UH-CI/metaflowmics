import pandas as pd
from counter import SequenceCounter

def write_summary(root_dir,data_dir,id_threshold):
    
    steps = [("0-RawData", data_dir),
             ("*PreFiltering","*R1*.fastq*"),
             ("*ITSxpress","*_ITS*.fastq"),
             ("*NandSmallSeqsFiltering","*noN.fastq"),
             ("*QualityFiltering","*_filtered.fastq.gz"),
             ("*Clustering","*.csv"),
             ("*LULU_correction","abundance_table*.csv")                                         
    ]

    counters = sorted([ SequenceCounter(name=name,path=pattern.replace("{1,2}","1")) if i==0 else
                        SequenceCounter(path="{}/{}/{}".format(root_dir,name,pattern))
                        for i,(name,pattern) in enumerate(steps) ],
                      key=lambda x: x.step_nb)

    # Get list of sample names
    raw_data_count = counters[0].run(id_threshold)
    sample_names = sorted(raw_data_count.index)

    # Retrieve summaries generated by R
    denoising_step = (pd.read_csv("count_summary.tsv", sep='\t', dtype={'Sample':str})
                      .set_index('Sample')
                      .reindex(sample_names)
                      .fillna('0'))

    # Fill the first counts
    res_all_samples = [ raw_data_count ]

    # Loop over the remaining steps
    for i,counter in enumerate(counters[1:]):
        if i == 4:
            res_all_samples.append(denoising_step)

        summary_i = counter.run(id_threshold,sample_names)

        if summary_i.shape[0] == 0:
            summary_i = pd.Series(pd.DataFrame(res_all_samples[-1]).values[:,-1],
                                  index=sample_names,name=counter.name)
            
        res_all_samples.append(summary_i)

    summary = pd.concat(res_all_samples,axis=1)

    # Set to "-" if the value does not change from one step to the next
    summary_clean = summary[ (summary.shift(1,axis=1) != summary) | (summary == 0) ].fillna('-')
    # But we keep the last column
    summary_clean.iloc[:,-1] = summary.iloc[:,-1]
    summary_clean.to_csv("sequences_per_sample_per_step_{}.tsv".format(id_threshold),sep="\t")
